// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: processed.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const insertProcessed = `-- name: InsertProcessed :exec
INSERT INTO processed(id, content)
VALUES ($1, $2)
`

type InsertProcessedParams struct {
	ID      uuid.UUID   `json:"id"`
	Content pgtype.Text `json:"content"`
}

func (q *Queries) InsertProcessed(ctx context.Context, arg InsertProcessedParams) error {
	_, err := q.db.Exec(ctx, insertProcessed, arg.ID, arg.Content)
	return err
}

const isProcessed = `-- name: IsProcessed :one
SELECT EXISTS(SELECT id, content FROM processed WHERE id = $1)
`

func (q *Queries) IsProcessed(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, isProcessed, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
